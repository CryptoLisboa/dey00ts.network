generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String?          @unique
  name            String?
  bio             String?
  createdAt       DateTime         @default(now())
  emailVerified   DateTime?
  updatedAt       DateTime         @updatedAt
  externalId      String           @unique
  website         String?
  image           String?
  active          Boolean          @default(false)
  genderId        Int?
  locationId      Int?
  accounts        Account[]
  Authenticator   Authenticator[]
  collections     Collection[]
  followers       Connection[]     @relation("followerConnection")
  followings      Connection[]     @relation("followingConnection")
  contents        Content[]
  dust            Dust?
  profile         Profile?
  sessions        Session[]
  socials         Socials?
  gender          Gender?          @relation("UserToGender", fields: [genderId], references: [id], map: "UserToGenderFK", onDelete: Cascade)
  location        Location?        @relation(fields: [locationId], references: [id], onDelete: Cascade)
  userExperiences UserExperience[]
  wallets         Wallet[]
  languages       Language[]       @relation("UserLanguages")
  skills          Skill[]          @relation("UserSkills")
  Connection      Connection[]
}

model Wallet {
  id      Int    @id @default(autoincrement())
  userId  String
  address String @unique
  network String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_wallets_user")
}

model Profile {
  id        Int     @id @default(autoincrement())
  userId    String  @unique
  bio       String?
  avatarUrl String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Location {
  id                Int         @id @default(autoincrement())
  name              String?
  value             String?
  Event             Event[]
  User              User[]
  countryId         Int?
  stateId           Int?
  cityId            Int?
  country           CountryApi? @relation("UserLocationCountry", fields: [countryId], references: [id], onDelete: Cascade)
  state             StateApi?   @relation("UserLocationState", fields: [stateId], references: [id], onDelete: Cascade)
  city              CityApi?    @relation("UserLocationCity", fields: [cityId], references: [id], onDelete: Cascade)
  externalCountryId Int?
  externalStateId   Int?
  externalCityId    Int?
}

model CountryApi {
  id                  Int        @id @default(autoincrement())
  externalCountryId   Int        @unique
  name                String
  iso3                String
  iso2                String
  region              String?
  externalRegionId    Int?
  subregion           String?
  externalSubRegionId Int?
  latitude            Float?
  longitude           Float?
  emoji               String
  states              StateApi[]
  cities              CityApi[]
  locations           Location[] @relation("UserLocationCountry")

  @@index([externalCountryId], map: "idx_country_external_id")
}

model StateApi {
  id              Int        @id @default(autoincrement())
  externalStateId Int        @unique
  name            String
  iso2            String
  stateCode       String
  latitude        Float?
  longitude       Float?
  countryId       Int
  country         CountryApi @relation(fields: [countryId], references: [id])
  cities          CityApi[]
  locations       Location[] @relation("UserLocationState")

  @@index([externalStateId], map: "idx_state_external_id")
}

model CityApi {
  id             Int        @id @default(autoincrement())
  externalCityId Int        @unique
  name           String
  latitude       Float?
  longitude      Float?
  stateId        Int
  state          StateApi   @relation(fields: [stateId], references: [id])
  countryId      Int
  country        CountryApi @relation(fields: [countryId], references: [id])
  locations      Location[] @relation("UserLocationCity")

  @@index([externalCityId], map: "idx_city_external_id")
}

model Language {
  id    Int    @id @default(autoincrement())
  name  String
  users User[] @relation("UserLanguages")
}

model Experience {
  id              Int              @id @default(autoincrement())
  company         String?
  role            String?
  description     String?
  current         Boolean?
  endDate         DateTime?
  skillId         Int
  startDate       DateTime
  skill           Skill            @relation(fields: [skillId], references: [id])
  userExperiences UserExperience[]
}

model UserExperience {
  userId       String
  experienceId Int
  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, experienceId])
}

model Connection {
  id          Int     @id @default(autoincrement())
  followerId  String
  followingId String
  follower    User    @relation("followerConnection", fields: [followerId], references: [id])
  following   User    @relation("followingConnection", fields: [followingId], references: [id])
  User        User?   @relation(fields: [userId], references: [id])
  userId      String?
}

model Avatar {
  id          Int     @id @default(autoincrement())
  imageUrl    String
  description String?
}

model Content {
  id     Int     @id @default(autoincrement())
  title  String?
  body   String?
  userId String
  user   User    @relation(fields: [userId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  locationId  Int
  location    Location @relation(fields: [locationId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Socials {
  id               Int     @id @default(autoincrement())
  userId           String  @unique
  telegramId       String?
  telegramUsername String?
  discordId        String?
  discordUsername  String?
  twitterId        String?
  twitterHandle    String?
  twitterUsername  String?
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_socials_user")
}

model Token {
  id           Int        @id @default(autoincrement())
  wallet       String
  tokenId      Int
  staked       Boolean
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}

model Collection {
  id       Int     @id @default(autoincrement())
  network  String
  contract String
  userId   String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokens   Token[]

  @@unique([contract, network, userId])
}

model Dust {
  id            Int    @id @default(autoincrement())
  userId        String @unique
  amount        Int
  preciseAmount String
  decimals      Int
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_dust_user")
}

model Skill {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  experiences Experience[]
  users       User[]       @relation("UserSkills")
}

model Gender {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[] @relation("UserToGender")
}
