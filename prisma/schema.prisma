// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  externalId    String          @unique
  email         String          @unique
  name          String?
  profile       Profile?
  locations     Location[]
  experiences   Experience[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  followers     Connection[]    @relation(name: "followingConnection")
  followings    Connection[]    @relation(name: "followerConnection")
  contents      Content[]
  wallets       Wallet[]
  socials       Socials?
  collections   Collection[]
  dust          Dust?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Wallet {
  id      Int    @id @default(autoincrement())
  userId  String
  network String
  address String @unique
  user    User   @relation(fields: [userId], references: [id])

  @@index([userId], name: "idx_wallets_user")
}

model Profile {
  id        Int     @id @default(autoincrement())
  userId    String  @unique
  bio       String?
  avatarUrl String?
  user      User    @relation(fields: [userId], references: [id])
}

model Location {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  latitude    Float?
  longitude   Float?
  User        User?   @relation(fields: [userId], references: [id])
  userId      String?
  Event       Event[]
}

model Experience {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  userId      String
  user        User    @relation(fields: [userId], references: [id])
}

model Connection {
  id          Int    @id @default(autoincrement())
  followerId  String
  followingId String
  // This user is followed by the follower
  follower    User   @relation(name: "followingConnection", fields: [followerId], references: [id])
  // This user is following the following
  following   User   @relation(name: "followerConnection", fields: [followingId], references: [id])
}

model Avatar {
  id          Int     @id @default(autoincrement())
  imageUrl    String
  description String?
}

model Content {
  id     Int     @id @default(autoincrement())
  title  String?
  body   String?
  userId String
  user   User    @relation(fields: [userId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  locationId  Int
  location    Location @relation(fields: [locationId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Socials {
  id               Int     @id @default(autoincrement())
  userId           String  @unique
  telegramId       String?
  telegramUsername String?
  discordId        String?
  discordUsername  String?
  twitterId        String?
  twitterHandle    String?
  twitterUsername  String?
  user             User    @relation(fields: [userId], references: [id])

  @@index([userId], name: "idx_socials_user")
}

model Token {
  id           Int        @id @default(autoincrement())
  wallet       String
  tokenId      Int
  staked       Boolean
  collectionId Int
  collection   Collection @relation(fields: [collectionId], references: [id])
}

model Collection {
  id       Int     @id @default(autoincrement())
  network  String
  contract String
  userId   String
  tokens   Token[]
  user     User    @relation(fields: [userId], references: [id])
}

model Dust {
  id            Int    @id @default(autoincrement())
  userId        String @unique
  amount        Int
  preciseAmount String
  decimals      Int
  user          User   @relation(fields: [userId], references: [id])

  @@index([userId], name: "idx_dust_user")
}
